/**
 * Generated by orval v6.12.0 🍺
 * Do not edit manually.
 * GhostUI API
 * Detailed Description of API
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import { baseAxiosInstance } from './custom-axios';
import type { ErrorType } from './custom-axios';
export type SampleDataWeatherForecastsParams = { startDateIndex?: number };

export type WeatherForecast = {
  temperatureC?: number;
  dateFormatted?: string | null;
  summary?: string | null;
  temperatureF?: number;
  id?: number;
};

export type DotNetUserGroup = {
  groupName?: string;
  groupAdmin?: string;
  eventName?: string;
  eventDate?: Date;
};

export type Credentials = {
  userName?: string | null;
  password?: string | null;
  rememberMe?: boolean;
};

export type AuthUser = {
  status?: string;
  token?: string;
  userName?: string;
};




export const authLogin = (
    credentials: Credentials,
 ) => {
      return baseAxiosInstance<AuthUser>(
      {url: `/api/Auth/Login`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: credentials
    },
      );
    }
  


    export type AuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authLogin>>>
    export type AuthLoginMutationBody = Credentials
    export type AuthLoginMutationError = ErrorType<unknown>

    export const useAuthLogin = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogin>>, TError,{data: Credentials}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLogin>>, {data: Credentials}> = (props) => {
          const {data} = props ?? {};

          return  authLogin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof authLogin>>, TError, {data: Credentials}, TContext>(mutationFn, mutationOptions);
    }
    
export const authLogout = (
    
 ) => {
      return baseAxiosInstance<void>(
      {url: `/api/Auth/Logout`, method: 'post'
    },
      );
    }
  


    export type AuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof authLogout>>>
    
    export type AuthLogoutMutationError = ErrorType<unknown>

    export const useAuthLogout = <TError = ErrorType<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogout>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLogout>>, TVariables> = () => {
          

          return  authLogout()
        }

        

      return useMutation<Awaited<ReturnType<typeof authLogout>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
export const demoGetUserGroup = (
    
 signal?: AbortSignal
) => {
      return baseAxiosInstance<DotNetUserGroup>(
      {url: `/api/Demo/GetUserGroup`, method: 'get', signal
    },
      );
    }
  

export const getDemoGetUserGroupQueryKey = () => [`/api/Demo/GetUserGroup`];

    
export type DemoGetUserGroupQueryResult = NonNullable<Awaited<ReturnType<typeof demoGetUserGroup>>>
export type DemoGetUserGroupQueryError = ErrorType<unknown>

export const useDemoGetUserGroup = <TData = Awaited<ReturnType<typeof demoGetUserGroup>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof demoGetUserGroup>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDemoGetUserGroupQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof demoGetUserGroup>>> = ({ signal }) => demoGetUserGroup(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof demoGetUserGroup>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const sampleDataWeatherForecasts = (
    params?: SampleDataWeatherForecastsParams,
 signal?: AbortSignal
) => {
      return baseAxiosInstance<WeatherForecast[]>(
      {url: `/api/SampleData/WeatherForecasts`, method: 'get',
        params, signal
    },
      );
    }
  

export const getSampleDataWeatherForecastsQueryKey = (params?: SampleDataWeatherForecastsParams,) => [`/api/SampleData/WeatherForecasts`, ...(params ? [params]: [])];

    
export type SampleDataWeatherForecastsQueryResult = NonNullable<Awaited<ReturnType<typeof sampleDataWeatherForecasts>>>
export type SampleDataWeatherForecastsQueryError = ErrorType<unknown>

export const useSampleDataWeatherForecasts = <TData = Awaited<ReturnType<typeof sampleDataWeatherForecasts>>, TError = ErrorType<unknown>>(
 params?: SampleDataWeatherForecastsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sampleDataWeatherForecasts>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSampleDataWeatherForecastsQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof sampleDataWeatherForecasts>>> = ({ signal }) => sampleDataWeatherForecasts(params, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof sampleDataWeatherForecasts>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


